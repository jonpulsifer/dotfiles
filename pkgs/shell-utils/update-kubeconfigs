#!/usr/bin/env bash

set -u

# Configuration
HOSTS=("nuc.pirate-musical.ts.net" "retrofit.pirate-musical.ts.net")
KUBECONFIG_PATH="$HOME/.kube/config"
TEMP_DIR=$(mktemp -d)
BACKUP_PATH="$HOME/.kube/config.backup.$(date +%Y%m%d-%H%M%S)"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log() {
    echo -e "${BLUE}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

cleanup() {
    log "Cleaning up temporary files..."
    rm -rf "$TEMP_DIR"
}

trap cleanup EXIT

# Function to get short hostname from FQDN
get_short_hostname() {
    local hostname="$1"
    echo "${hostname%%.*}"
}

# Function to fetch and process kubeconfig from a host
fetch_and_process_kubeconfig() {
    local host="$1"
    local short_name=$(get_short_hostname "$host")
    local temp_config="$TEMP_DIR/kubeconfig-$short_name"
    
    log "Fetching kubeconfig from $host..."
    
    # Fetch the kubeconfig in JSON format for easier processing
    if ! ssh "$host" -- sudo kubectl config view --minify --flatten --output=json > "$TEMP_DIR/$short_name-original.json"; then
        error "Failed to fetch kubeconfig from $host"
        return 1
    fi
    
    # Check if the file is empty or invalid
    if [[ ! -s "$TEMP_DIR/$short_name-original.json" ]]; then
        error "Received empty kubeconfig from $host"
        return 1
    fi
    
    log "Processing kubeconfig for $host..."
    
    # Process the JSON kubeconfig using jq (simplified version)
    if ! jq --arg short_name "$short_name" --arg host "$host" '
        .clusters[0].name = $short_name |
        .clusters[0].cluster.server = "https://\($host):6443" |
        .contexts[0].name = $short_name |
        .contexts[0].context.cluster = $short_name |
        .contexts[0].context.user = "\($short_name)-admin" |
        .users[0].name = "\($short_name)-admin" |
        .["current-context"] = $short_name
    ' "$TEMP_DIR/$short_name-original.json" > "$TEMP_DIR/$short_name-processed.json"; then
        error "Failed to process JSON for $host"
        return 1
    fi
    
    # Convert back to YAML for kubectl compatibility
    if ! kubectl config view --kubeconfig="$TEMP_DIR/$short_name-processed.json" --minify --flatten > "$temp_config"; then
        error "Failed to convert to YAML for $host"
        return 1
    fi
    
    if [[ ! -s "$temp_config" ]]; then
        error "Failed to process kubeconfig for $host"
        return 1
    fi
    
    success "Processed kubeconfig for $host (cluster: $short_name, server: https://$host:6443)"
    return 0
}

# Function to merge all kubeconfigs using kubectl
merge_kubeconfigs() {
    log "Merging kubeconfigs..." >&2
    
    local temp_kubeconfigs=()
    for host in "${HOSTS[@]}"; do
        local short_name=$(get_short_hostname "$host")
        local temp_config="$TEMP_DIR/kubeconfig-$short_name"
        
        if [[ -f "$temp_config" ]]; then
            temp_kubeconfigs+=("$temp_config")
            log "Will merge: $temp_config" >&2
        else
            warn "Skipping $host - kubeconfig not available"
        fi
    done
    
    if [[ ${#temp_kubeconfigs[@]} -eq 0 ]]; then
        error "No kubeconfigs were successfully processed"
        return 1
    fi
    
    log "Merging ${#temp_kubeconfigs[@]} kubeconfig(s)..." >&2
    
    # Use KUBECONFIG environment variable to merge configs
    local kubeconfig_list=$(IFS=:; echo "${temp_kubeconfigs[*]}")
    local merged_config="$TEMP_DIR/merged-kubeconfig"
    
    log "KUBECONFIG list: $kubeconfig_list" >&2
    
    if ! KUBECONFIG="$kubeconfig_list" kubectl config view --flatten > "$merged_config" 2>/dev/null; then
        error "Failed to merge kubeconfigs"
        return 1
    fi
    
    # Set the first context as current if no current context is set
    if ! KUBECONFIG="$merged_config" kubectl config current-context &>/dev/null; then
        local first_context=$(KUBECONFIG="$merged_config" kubectl config get-contexts -o name | head -n1)
        if [[ -n "$first_context" ]]; then
            log "Setting current context to: $first_context" >&2
            KUBECONFIG="$merged_config" kubectl config use-context "$first_context" > /dev/null
        fi
    fi
    
    echo "$merged_config"
}

# Main execution
main() {
    log "Starting kubeconfig update process..."
    
    # Check dependencies
    if ! command -v jq &> /dev/null; then
        error "jq is required but not installed. Please install jq first."
        exit 1
    fi
    
    if ! command -v kubectl &> /dev/null; then
        error "kubectl is required but not installed."
        exit 1
    fi
    
    if ! command -v ssh &> /dev/null; then
        error "ssh is required but not installed."
        exit 1
    fi
    
    # Create .kube directory if it doesn't exist
    mkdir -p "$(dirname "$KUBECONFIG_PATH")"
    
    # Backup existing kubeconfig if it exists
    if [[ -f "$KUBECONFIG_PATH" ]]; then
        log "Backing up existing kubeconfig to $BACKUP_PATH"
        cp "$KUBECONFIG_PATH" "$BACKUP_PATH"
    fi
    
    # Process each host
    local successful_hosts=0
    log "About to process ${#HOSTS[@]} hosts: ${HOSTS[*]}"
    for host in "${HOSTS[@]}"; do
        log "Starting processing for host: $host"
        if fetch_and_process_kubeconfig "$host"; then
            ((successful_hosts++))
            log "SUCCESS: Host $host processed successfully"
        else
            warn "Failed to process kubeconfig from $host"
        fi
        log "Completed processing for host: $host (successful: $successful_hosts)"
    done
    
    if [[ $successful_hosts -eq 0 ]]; then
        error "No kubeconfigs were successfully fetched"
        exit 1
    fi
    
    log "Successfully processed $successful_hosts kubeconfig(s)"
    
    # Merge all kubeconfigs
    local merged_config
    if merged_config=$(merge_kubeconfigs); then
        mv "$merged_config" "$KUBECONFIG_PATH"
        success "Successfully updated kubeconfig at $KUBECONFIG_PATH"
        
        # Show summary
        log "Available contexts:"
        kubectl config get-contexts --no-headers | while read line; do
            echo "  $line"
        done
        
        local current_context=$(kubectl config current-context 2>/dev/null || echo "none")
        log "Current context: $current_context"
        
        # Show cluster info
        log "Cluster information:"
        for host in "${HOSTS[@]}"; do
            local short_name=$(get_short_hostname "$host")
            if kubectl config get-contexts -o name | grep -q "^${short_name}$"; then
                local server=$(kubectl config view -o jsonpath="{.clusters[?(@.name=='$short_name')].cluster.server}" 2>/dev/null || echo "unknown")
                echo "  $short_name: $server"
            fi
        done
    else
        error "Failed to merge kubeconfigs"
        exit 1
    fi
}

# Show help
show_help() {
    cat << EOF
Usage: $0 [OPTIONS]

Update kubeconfig by fetching and merging configs from multiple Kubernetes clusters.

OPTIONS:
    -h, --help      Show this help message
    -l, --list      List configured hosts
    --dry-run       Show what would be done without making changes

CONFIGURED HOSTS:
$(printf '  %s\n' "${HOSTS[@]}")

The script will:
1. Fetch kubeconfig from each host via SSH (as JSON for easier processing)
2. Rename clusters/contexts/users to avoid conflicts
3. Update server URLs to use Tailscale hostnames
4. Merge all configs into ~/.kube/config using kubectl
5. Create a backup of the existing config

DEPENDENCIES:
- kubectl (for kubeconfig manipulation)
- jq (for JSON processing)
- ssh (for remote access)

EOF
}

# Parse command line arguments
case "${1:-}" in
    -h|--help)
        show_help
        exit 0
        ;;
    -l|--list)
        echo "Configured hosts:"
        printf '  %s\n' "${HOSTS[@]}"
        exit 0
        ;;
    --dry-run)
        log "DRY RUN MODE - No changes will be made"
        # Set a flag for dry run mode if you want to implement it
        warn "Dry run mode not yet implemented"
        exit 0
        ;;
    "")
        main
        ;;
    *)
        error "Unknown option: $1"
        show_help
        exit 1
        ;;
esac
